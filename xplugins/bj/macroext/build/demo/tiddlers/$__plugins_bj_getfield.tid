author: JeffreyWilkinson aka BJ
core-version: >=5.1.11
created: 20160512055312656
dependents: 
description: macro version of view widget++
list: readme license
modified: 20160512055312656
plugin-type: plugin
source: https://github.com/buggyj/TW5-tools
title: $:/plugins/bj/getfield
type: application/json
version: 1.11.4

{
    "tiddlers": {
        "$:/bj/modules/macros/getfield.js": {
            "text": "/*\\\ntitle: $:/bj/modules/macros/getfield.js\ntype: application/javascript\nmodule-type: macro\ntags: $:/tags/tiddlyclip \n\nView widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"getfield\";\n\nexports.params = [\n\t{name: \"tiddler\"},{name: \"subtiddler\"},{name: \"field\"},{name: \"index\"},{name: \"format\"},{name: \"template\"}\n];\n\nexports.run = function(tiddler,subtiddler,field,index,format,template) {\n/*\nInherit from the base widget class\n*/\n\tvar parent = this;\n\tvar ViewWidget = function() {\n\t\tthis.initialise();\n\t};\n\tViewWidget.prototype =  {};\n\t\n\n\n/*\nCompute the internal state of the widget\n*/\nViewWidget.prototype.make = function(x) {\n\t// allow indirection of variable - <varible-name>\n\tvar reParam = /<([^>\\s]+)>/mg,\n\t\tparamMatch = reParam.exec(x);\n\t\t\n\tif (paramMatch) {\n\t\treturn parent.getVariable(paramMatch[1]);\n\t}\n\telse {\n\t\treturn x;\n\t}\n}\n\nViewWidget.prototype.getTidName = function() {\n\tvar transclusion = parent.getVariable(\"transclusion\");\t\n\tif (transclusion) {\n\t\treturn transclusion.split('|')[1];\n\t}\n\telse {\n\t\treturn \"\";\n\t}\n}\n\nViewWidget.prototype.getSubtidName = function() {\n\tvar transclusion = parent.getVariable(\"transclusion\");\n\tvar reParam = /\\{([^\\}\\s]+)\\}/mg,\n\t\tparamMatch = reParam.exec(transclusion);\n\t\t\n\tif (paramMatch) {\n\t\treturn paramMatch[1].split('|')[4];\n\t}\n\telse {\n\t\treturn \"\";\n\t}\n}\n\nViewWidget.prototype.initialise = function() {\n\tthis.wiki = $tw.wiki;\n\t// Get parameters from our attributes\n\tthis.viewTitle = this.make(tiddler||\"<currentTiddler>\");\n\tthis.viewSubtiddler = this.make(subtiddler);\n\tif (this.viewTitle === \"$\") { \n\t\tthis.viewTitle = this.getTidName();\n\t\tif (this.viewSubtiddler === \"$\") {\n\t\t\tthis.viewSubtiddler = this.getSubtidName();\n\t\t}\n\t}\n\tthis.viewField = this.make(field||\"text\");\n\tthis.viewIndex = this.make(index);\n\tthis.viewFormat = format||\"text\";\n\tthis.viewTemplate = template||\"\";\n\tswitch(this.viewFormat) {\n\t\tcase \"htmlwikified\":\n\t\t\tthis.text = this.getValueAsHtmlWikified();\n\t\t\tbreak;\n\t\tcase \"htmlencodedplainwikified\":\n\t\t\tthis.text = this.getValueAsHtmlEncodedPlainWikified();\n\t\t\tbreak;\n\t\tcase \"htmlencoded\":\n\t\t\tthis.text = this.getValueAsHtmlEncoded();\n\t\t\tbreak;\n\t\tcase \"urlencoded\":\n\t\t\tthis.text = this.getValueAsUrlEncoded();\n\t\t\tbreak;\n\t\tcase \"doubleurlencoded\":\n\t\t\tthis.text = this.getValueAsDoubleUrlEncoded();\n\t\t\tbreak;\n\t\tcase \"date\":\n\t\t\tthis.text = this.getValueAsDate(this.viewTemplate);\n\t\t\tbreak;\n\t\tcase \"relativedate\":\n\t\t\tthis.text = this.getValueAsRelativeDate();\n\t\t\tbreak;\n\t\tcase \"stripcomments\":\n\t\t\tthis.text = this.getValueAsStrippedComments();\n\t\t\tbreak;\n\t\tcase \"jsencoded\":\n\t\t\tthis.text = this.getValueAsJsEncoded();\n\t\t\tbreak;\n\t\tdefault: // \"text\"\n\t\t\tthis.text = this.getValueAsText();\n\t\t\tbreak;\n\t}\n};\n\n/*\nThe various formatter functions are baked into this widget for the moment. Eventually they will be replaced by macro functions\n*/\n\n/*\nRetrieve the value of the widget. Options are:\nasString: Optionally return the value as a string\n*/\nViewWidget.prototype.getValue = function(options) {\n\toptions = options || {};\n\tvar value = options.asString ? \"\" : undefined;\n\tif(this.viewIndex) {\n\t\tvalue = this.wiki.extractTiddlerDataItem(this.viewTitle,this.viewIndex);\n\t} else {\n\t\tvar tiddler;\n\t\tif(this.viewSubtiddler) {\n\t\t\ttiddler = this.wiki.getSubTiddler(this.viewTitle,this.viewSubtiddler);\t\n\t\t} else {\n\t\t\ttiddler = this.wiki.getTiddler(this.viewTitle);\n\t\t}\n\t\tif(tiddler) {\n\t\t\tif(this.viewField === \"text\" && !this.viewSubtiddler) {\n\t\t\t\t// Calling getTiddlerText() triggers lazy loading of skinny tiddlers\n\t\t\t\tvalue = this.wiki.getTiddlerText(this.viewTitle);\n\t\t\t} else {\n\t\t\t\tif($tw.utils.hop(tiddler.fields,this.viewField)) {\n\t\t\t\t\tif(options.asString) {\n\t\t\t\t\t\tvalue = tiddler.getFieldString(this.viewField);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = tiddler.fields[this.viewField];\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif(this.viewField === \"title\") {\n\t\t\t\tvalue = this.viewTitle;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n\nViewWidget.prototype.getf = function() {\n\treturn this.text;\n};\nViewWidget.prototype.getValueAsText = function() {\n\treturn this.getValue({asString: true});\n};\n\nViewWidget.prototype.getValueAsHtmlWikified = function() {\n\treturn this.wiki.renderText(\"text/html\",\"text/vnd.tiddlywiki\",this.getValueAsText(),{parentWidget: this});\n};\n\nViewWidget.prototype.getValueAsHtmlEncodedPlainWikified = function() {\n\treturn $tw.utils.htmlEncode(this.wiki.renderText(\"text/plain\",\"text/vnd.tiddlywiki\",this.getValueAsText(),{parentWidget: this}));\n};\n\nViewWidget.prototype.getValueAsHtmlEncoded = function() {\n\treturn $tw.utils.htmlEncode(this.getValueAsText());\n};\n\nViewWidget.prototype.getValueAsUrlEncoded = function() {\n\treturn encodeURIComponent(this.getValueAsText());\n};\n\nViewWidget.prototype.getValueAsDoubleUrlEncoded = function() {\n\treturn encodeURIComponent(encodeURIComponent(this.getValueAsText()));\n};\n\nViewWidget.prototype.getValueAsDate = function(format) {\n\tformat = format || \"YYYY MM DD 0hh:0mm\";\n\tvar value = $tw.utils.parseDate(this.getValue());\n\tif(value && $tw.utils.isDate(value) && value.toString() !== \"Invalid Date\") {\n\t\treturn $tw.utils.formatDateString(value,format);\n\t} else {\n\t\treturn \"\";\n\t}\n};\n\nViewWidget.prototype.getValueAsRelativeDate = function(format) {\n\tvar value = $tw.utils.parseDate(this.getValue());\n\tif(value && $tw.utils.isDate(value) && value.toString() !== \"Invalid Date\") {\n\t\treturn $tw.utils.getRelativeDate((new Date()) - (new Date(value))).description;\n\t} else {\n\t\treturn \"\";\n\t}\n};\n\nViewWidget.prototype.getValueAsStrippedComments = function() {\n\tvar lines = this.getValueAsText().split(\"\\n\"),\n\t\tout = [];\n\tfor(var line=0; line<lines.length; line++) {\n\t\tvar text = lines[line];\n\t\tif(!/^\\s*\\/\\/#/.test(text)) {\n\t\t\tout.push(text);\n\t\t}\n\t}\n\treturn out.join(\"\\n\");\n};\n\nViewWidget.prototype.getValueAsJsEncoded = function() {\n\treturn $tw.utils.stringify(this.getValueAsText());\n};\n\nvar getf = new ViewWidget();\nreturn getf.getf();\n}\n\n})();\n",
            "title": "$:/bj/modules/macros/getfield.js",
            "type": "application/javascript",
            "module-type": "macro",
            "tags": "$:/tags/tiddlyclip"
        },
        "$:/plugins/bj/getfield/license": {
            "title": "$:/plugins/bj/getfield/license",
            "text": "The MIT License (MIT)\n\nCopyright (c) 2016 Jeffrey Wikinson aka buggyj\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        "$:/plugins/bj/getfield/readme": {
            "title": "$:/plugins/bj/getfield/readme",
            "text": "Macro version of the view widget with the addition of self referal. \nsetting tiddler:\"$\" enables the base tidder (eg in transclusion `{{toptiddler||basetiddler}})` to refer to its fields.\n"
        }
    }
}